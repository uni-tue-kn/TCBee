[package]
name = "tcbee"
version = "0.1.0"
edition = "2021"

[dependencies]
tcbee-common = { path = "../tcbee-common", features = ["user"]  }

anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
env_logger = { workspace = true }
libc = { workspace = true }
log = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread", "net", "signal", "time","fs","io-util"] }
tokio-util = "0.7.12"
tokio-scope = "0.0.0"
thiserror = "2.0.4"
serde = "1.0.217"
ratatui = "0.29.0"
color-eyre = "0.6.3"
crossterm = "0.28.1"
argparse = "0.2.2"
glob = "0.3.2"
bincode = "1.3.3"

[build-dependencies]
cargo_metadata = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
tcbee-ebpf = { path = "../tcbee-ebpf" }

[[bin]]
name = "tcbee"
path = "src/main.rs"

[net]
net.git-fetch-with-cli= true 


